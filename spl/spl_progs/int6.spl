alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if(sysCallNo == 9) then
    alias fileName S2;
    fileName = [physicalSP - 3];

    alias fatIndex S3;
    fatIndex = 0;

    while(fatIndex < 64 && [FAT + fatIndex * 8] != fileName) do
        fatIndex = fatIndex + 1;
    endwhile;

    if(fatIndex == 64) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    load(1, [FAT + fatIndex * 8 + 2]);

    alias counter S4;
    counter = 0;

    while(counter < 6) do
        if([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then
            [MEM_LIST + [PTBR + counter * 2 + 0]] = [MEM_LIST + [PTBR + counter * 2 + 0]] - 1;
        endif;

        if([PTBR + counter * 2 + 1] == "00" && [PTBR + counter * 2 + 0] >= 448) then
            [DISK_LIST + [PTBR + counter * 2 + 0]] = [DISK_LIST + [PTBR + counter * 2 + 0]] - 1;
            store(6, 20);

        endif;
        counter = counter + 1;
    endwhile;

    alias codePages S5;

    codePages = 0;
    counter = 0;
    while(counter < 256) do
        if([SCRATCHPAD + counter] != -1) then
            codePages = codePages + 1;
        else
            break;
        endif;
        counter = counter + 1;
    endwhile;

    if(codePages > 3) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    counter = 0;
    while(counter < codePages) do
        [PTBR + counter * 2 + 0] = [SCRATCHPAD + counter];
        [PTBR + counter * 2 + 1] = "00";
        counter = counter + 1;
    endwhile;

    while(counter < 3) do
        [PTBR + counter * 2 + 0] = -1;
        [PTBR + counter * 2 + 1] = "00";
        counter = counter + 1;
    endwhile;

    [PTBR + 7] = "01";

    alias currentPCB S8;
    currentPCB = READY_LIST + ((PTBR - 1024) / 8) * 32;

    counter = 0;
    while(counter < 8) do
        if([currentPCB + counter * 2 + 15] != -1) then
            [FILE_TABLE + [currentPCB + counter * 2 + 15] * 2 + 1] = [FILE_TABLE + [currentPCB + counter * 2 + 15] * 2 + 1] - 1;
            if([FILE_TABLE + [currentPCB + counter * 2 + 15] * 2 + 1] == 0) then
                [FILE_TABLE + [currentPCB + counter * 2 + 15] * 2] = -1;
            endif;
            [currentPCB + counter * 2 + 15 + 0] = -1;
            [currentPCB + counter * 2 + 15 + 1] = -1;
        endif;
        counter = counter + 1;
    endwhile;

    SP = 3 * 512;
    // [physicalSP - 2] = 1;

    physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
    [physicalSP] = 0;

    ireturn;
endif;

if(sysCallNo == 11) then
    alias currentPID S2;
    currentPID = (PTBR - 1024) / 8;
    [physicalSP - 2] = currentPID;
    ireturn;
endif;

if(sysCallNo == 12) then
    alias currentPID S2;
    currentPID = (PTBR - 1024) / 8;
    alias currentPCB S3;
    currentPCB = READY_LIST + currentPID * 32;
    if([currentPCB + 31] < 0 || [currentPCB + 31] > 31) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    [physicalSP - 2] = [currentPCB + 31];
    ireturn;
endif;
