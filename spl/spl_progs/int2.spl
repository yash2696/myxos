// getting the physicalSP
// Location of page table entry = PTBR + 2 x (Logical Address / 512)
// Physical Page Number = [ Location of page table entry + 0 ]
// offset = logical_address % 512
// Physical Address = Physical Page Number x 512 + offset

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

//        _________________________
//        |   IP + 2 (SP)         |
//        |   SYSTEM CALL NO      |
//        |   RETURN VALUE        |
//        |   ARGUMENTS n to 1    |
//        -------------------------

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

//Open system Call
if(sysCallNo == 2) then

    alias filename S2;
    filename = [physicalSP - 3];

//    ____________________________________________________________________________
//    |       0       |        1     |            2            |    3 - 7        |
//    ____________________________________________________________________________
//    |    File Name  |    File Size |  Block# of Basic Block  | ...Unused...    |
//    ----------------------------------------------------------------------------

    S3 = 0;

    //max 64 entries in the FAT
    //per entry size of 8 Blocks

    while(S3 < 64 && [FAT + S3 * 8] != filename) do
        S3 = S3 + 1;
    endwhile;

    if(S3 >= 64) then
        print "File not Found";
        [physicalSP - 2] = -1;      //return value = -1, failure
        ireturn;
    endif;

    // FILE_TABLE = 1344
    // System wide open file table - max entries 64 each two words
    // one is "FAT index" and second is "file open count"

    // S4 = index of the System-wide open file table entry
    S4 = 0;

    //searching for fat entry
    while([FILE_TABLE + S4 * 2] != S3 && S4 < 64) do
        S4 = S4 + 1;
    endwhile;

    //searching for valid entry
    if(S4 >= 64) then
        S4 = 0;
        while([FILE_TABLE + S4 * 2] != -1 && S4 < 64) do
            S4 = S4 + 1;
        endwhile;

        if(S4 >= 64) then
            print "no space in system wide open file table";
            [physicalSP - 2] = -1;
            ireturn;
        endif;
    endif;

    alias currentPCB S5;
    currentPCB = READY_LIST + 32 * ((PTBR - 1024) / 8);

    // searching per process file table
    alias i S6;
    i = 15;
    while(i < 31) do
        if([currentPCB + i] == -1) then
            break;
        endif;
        i = i + 2;
    endwhile;

    if(i >= 31) then
        print "max open file limit reached";
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    //Pointer to System-Wide File Table Entry
    [currentPCB + i + 0] = S4;

    //LSEEK POSITION
    [currentPCB + i + 1] = 0;

    //FAT Index field of the System Wide file table entry
    [FILE_TABLE + S4 * 2 + 0] = S3;

    //File Open Count
    [FILE_TABLE + S4 * 2 + 1] = [FILE_TABLE + S4 * 2 + 1] + 1;

    //The index of the entry in the per-process open file table
    [physicalSP - 2] = (i - 15) / 2;
    ireturn;
endif;

if(sysCallNo == 3) then
    alias fileDescriptor S2;
    fileDescriptor = [physicalSP - 3];

    //there can be at most 8 entries in a per process file table and each entry is of two words
    if(fileDescriptor < 0 || fileDescriptor > 7) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    alias PCB S3;
    PCB = READY_LIST + 32 * ((PTBR - 1024) / 8);

    //checking for valid file descriptor
    if([PCB + 15 + fileDescriptor * 2 + 0] == -1) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    //decrement the file open count in system wide open file table
    alias index S4;
    index = [PCB + 15 + fileDescriptor * 2];
    [FILE_TABLE + index * 2 + 1] = [FILE_TABLE + index * 2 + 1] - 1;

    //if open file count = 0, then invalidate the entries
    if([FILE_TABLE + index * 2 + 1] == 0) then
        [FILE_TABLE + index * 2 + 0] = -1;
    endif;

    //now invalidate the entry in per process open file table
    [PCB + 15 + fileDescriptor * 2 + 0] = -1;
    [PCB + 15 + fileDescriptor * 2 + 1] = -1;

    [physicalSP - 2] = 0;
    ireturn;
endif;
