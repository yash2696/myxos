alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if(sysCallNo == 8) then
    alias pcbIndex S2;
    pcbIndex = 0;
    while(pcbIndex < 32 && [READY_LIST + 32 * pcbIndex + 1] != 0) do
        pcbIndex = pcbIndex + 1;
    endwhile;

    if(pcbIndex >= 32) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;

    alias counter S15;
    counter = 0;

    [READY_LIST + pcbIndex * 32 + 0] = pcbIndex;

    counter = 0;
    while(counter < 64) do
        if([MEM_LIST + counter] == 0) then
            break;
        endif;
        counter = counter + 1;
    endwhile;

    if(counter == 64) then
        alias pTableEntry S7;
        pTableEntry = PAGE_TABLE - 2;
        while (1 == 1) do
            pTableEntry = pTableEntry + 2;
            //make it look circular
            if (pTableEntry == 1280) then
                pTableEntry = PAGE_TABLE - 2;
                continue;
            endif;
            //ignore stack
            if ((pTableEntry - (PAGE_TABLE + 6)) % 8 == 0) then
                continue;
            endif;

            if ([pTableEntry + 1] == "11") then
                [pTableEntry + 1] = "01";
                continue;
            endif;

            if ([pTableEntry + 1] == "00") then
                continue;
            endif;
            //You can't swap out this page if it is referened by some other process
            if ([MEM_LIST + [pTableEntry]] != 1) then      //What will happen if all pages are referenced by atleast one process?
                continue;
            endif;
            // [pTableEntry + 1] == "01" // Swap out victim page idetified!
            break;
        endwhile;
        // Scan for a free block in swap
        alias freeSwapBlock S8;
        freeSwapBlock = 448;
        while (freeSwapBlock < 512) do
            if ([DISK_LIST + freeSwapBlock] == 0) then
                [DISK_LIST + freeSwapBlock] = 1;
                break;
            endif;
            freeSwapBlock = freeSwapBlock + 1;
        endwhile;
        if (freeSwapBlock == 512) then
            print("Swap Full");
            halt;
        endif;
        store([pTableEntry], freeSwapBlock);
        counter = [pTableEntry];
        [pTableEntry] = freeSwapBlock;
        [pTableEntry + 1] = "00";
    endif;

    alias newStack S4;
    newStack = counter;
    [MEM_LIST + newStack] = 1;

    alias oldStack S5;
    oldStack = [PTBR + 6];
    counter = 0;
    while(counter < 512) do
        [newStack*512 + counter] = [oldStack*512 + counter];
        counter = counter + 1;
    endwhile;
    alias childPTBR S7;
    alias parentPTBR S8;

    childPTBR = PAGE_TABLE + pcbIndex * 8;
    parentPTBR = PTBR;

    [childPTBR + 6] = newStack;
    [childPTBR + 7] = "01";

    counter = 0;
    while(counter < PTLR - 1) do
        [childPTBR + counter*2] = [PTBR + counter*2];
        [childPTBR + counter*2 + 1] = [PTBR + counter*2 +1];
        if([childPTBR + counter*2 + 1] == "01" || [childPTBR + counter*2 + 1] == "11") then
            [MEM_LIST + [childPTBR + counter*2]] = [MEM_LIST + [childPTBR + counter*2]] + 1;
        endif;
        if([childPTBR + counter*2 + 1] == "00" && [childPTBR + counter*2] >= 448) then
            [DISK_LIST + [childPTBR + counter*2]] = [DISK_LIST + [childPTBR + counter*2]] + 1;
        endif;
        counter = counter + 1;
    endwhile;

    [READY_LIST + pcbIndex * 32 + 1] = 1;
    [READY_LIST + pcbIndex * 32 + 2] = BP;
    [READY_LIST + pcbIndex * 32 + 3] = SP - 1;
    [READY_LIST + pcbIndex * 32 + 4] = [physicalSP];
    [READY_LIST + pcbIndex * 32 + 5] = childPTBR;
    [READY_LIST + pcbIndex * 32 + 6] = 4;

    [READY_LIST + pcbIndex * 32 + 7] = R0;
    [READY_LIST + pcbIndex * 32 + 8] = R1;
    [READY_LIST + pcbIndex * 32 + 9] = R2;
    [READY_LIST + pcbIndex * 32 + 10] = R3;
    [READY_LIST + pcbIndex * 32 + 11] = R4;
    [READY_LIST + pcbIndex * 32 + 12] = R5;
    [READY_LIST + pcbIndex * 32 + 13] = R6;
    [READY_LIST + pcbIndex * 32 + 14] = R7;

    counter = 15;
    while(counter < 31) do
        [READY_LIST + pcbIndex * 32 + counter] = [READY_LIST + ((PTBR - 1024) * 32) / 8 + counter];
        [READY_LIST + pcbIndex * 32 + counter + 1] = [READY_LIST + ((PTBR - 1024) * 32) / 8 + counter + 1];

        if([READY_LIST + ((PTBR - 1024) * 32) / 8 + counter] != -1) then
            [FILE_TABLE + [READY_LIST + ((PTBR - 1024) * 32) / 8 + counter] * 2 + 1] = [FILE_TABLE + [READY_LIST + ((PTBR - 1024) * 32) / 8 + counter] * 2 + 1] + 1;
        endif;
        counter = counter + 2;
    endwhile;

    [READY_LIST + pcbIndex * 32 + 31] = ((PTBR - 1024) / 8);

    [physicalSP - 2] = pcbIndex;

    alias childPhysicalSP S10;

    childPhysicalSP = [childPTBR + 2 * (SP - 1) / 512] * 512 + (SP - 1) % 512;

    [childPhysicalSP - 1] = -2;
    ireturn;
endif;
