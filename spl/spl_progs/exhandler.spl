alias Cause S0;
Cause = EFR % 10;               // Gets value of cause field (size 1 char)

alias VPagenum S1;
VPagenum = (EFR / 10) % 100;    // Gets value of BadVAddr

alias Ip_addr S2;
Ip_addr = (EFR / 1000);         // Gets value of IP at the point of exception

alias physicalSP S11;
physicalSP = (([PTBR + (SP / 512) * 2] * 512) + (SP % 512));

if(Cause != 0) then
    if(Cause == 1) then
        print("Illegal Instruction");
    endif;

    if(Cause == 2) then
        print("Illegal Memory Access");
    endif;

    if(Cause == 3) then
        print("Arithmetic Exception");
    endif;

    if(Cause == 4) then
        print("Illegal Operands");
    endif;

    SP = SP + 2;
    physicalSP = [PTBR + 2 * SP/512]*512 + SP%512;
    [physicalSP - 1] = 10;
    inline "JMP 3584";
endif;

if([PTBR + VPagenum * 2 + 0] == -1) then
    SP = SP + 2;
    physicalSP = [PTBR + 2 * SP/512]*512 + SP%512;
    [physicalSP - 1] = 10;
    inline "JMP 3584";
endif;

alias counter S3;
counter = 0;

alias freePage S4;
freePage = 0;

alias index S5;

alias currentPID S6;
currentPID = (PTBR - 1024) / 8;

alias page S7;
page = PTBR + VPagenum * 2;

alias physicalPage S8;

while(freePage < 64) do
    if([MEM_LIST + freePage] == 0) then
        [MEM_LIST + freePage] = 1;
        break;
    endif;
    freePage = freePage + 1;
endwhile;

// there can be at most 32 page tables of 4 entries. each entry of two words. So at most 256 words
if(freePage == 64) then
    alias pageTableEntry S6;
    pageTableEntry = PTBR + VPagenum*2;
    while (1) do
        pageTableEntry = pageTableEntry + 2;
        if (pageTableEntry == 1280) then
            pageTableEntry = 1024;
            continue;
        endif;

        if ((pageTableEntry - 1024) % 8 == 6) then
            continue;
        endif;

        if ([pageTableEntry + 1] == "11") then
            [pageTableEntry + 1] = "01";
            continue;
        endif;

        if ([pageTableEntry + 1] == "00") then
            continue;
        endif;

        if ([MEM_LIST + [pageTableEntry]] != 1) then
            continue;
        endif;

        break;
    endwhile;

    alias freeBlock S7;
    freeBlock = 448;
    while (freeBlock < 512) do
        if ([DISK_LIST + freeBlock] == 0) then
            [DISK_LIST + freeBlock] = 1;
            break;
        endif;
        freeBlock = freeBlock + 1;
    endwhile;
    if (freeBlock == 512) then
        print("Swap Full");
        halt;
    endif;
    store([pageTableEntry], freeBlock);
    freePage = [pageTableEntry];
    [pageTableEntry] = freeBlock;
    [pageTableEntry + 1] = "00";
endif;

alias PVPagenum S9;
PVPagenum = [PTBR + VPagenum * 2];

if(PVPagenum > 20 && PVPagenum < 448) then
    load(freePage, PVPagenum);
endif;

if(PVPagenum >= 448) then
    load(freePage, PVPagenum);
    [DISK_LIST + PVPagenum] = [DISK_LIST + PVPagenum] - 1;
    store(6, 20);
endif;

[PTBR + VPagenum * 2 + 0] = freePage;
[PTBR + VPagenum * 2 + 1] = "11";

SP = SP + 1;
physicalSP = (([PTBR + (SP / 512)] * 512) + (SP % 512));

[physicalSP] = Ip_addr;
ireturn;
